
package pacman.entries.ghosts;

import static pacman.game.Constants.GHOST_SPEED_REDUCTION;

import java.awt.Color;
import java.util.EnumMap;
import java.util.Random;

import pacman.controllers.Controller;
import pacman.game.Constants.DM;
import pacman.game.Constants.GHOST;
import pacman.game.Constants.MOVE;
import pacman.game.Game;
import pacman.game.GameView;
import pacman.game.internal.Ghost;
import pacman.game.internal.Maze;
import pacman.game.internal.Node;

/*
 * This is the class you need to modify for your entry. In particular, you need to
 * fill in the getActions() method. Any additional classes you write should either
 * be placed in this package or sub-packages (e.g., game.entries.ghosts.mypackage).
 */
public class PotterGhosts extends Controller<EnumMap<GHOST,MOVE>>
{
	
	private EnumMap<GHOST, MOVE> myMoves=new EnumMap<GHOST, MOVE>(GHOST.class);
	Random rnd=new Random();
	
	
	public EnumMap<GHOST, MOVE> getMove(Game g, long timeDue)
	{
		myMoves.clear();
		GameView gv = new GameView(g);
		boolean hasPacmanDiedVar = false;
		//target scatter Nodes
		int pinkyScatterNode = 0;
		int blinkyScatterNode = 78;
		int inkyScatterNode = 1290;
		int sueScatterNode = 1200;
		
		
		//for loop for all ghosts
		for(GHOST ghost : GHOST.values()) 
		{
			//System.out.println(g.getCurrentLevelTime());
			if (g.doesGhostRequireAction(ghost)) 
			{
				/*
				myMoves.put(ghost, g.getNextMoveTowardsTarget(g.getGhostCurrentNodeIndex(ghost), 5, DM.PATH));
				
				if (ghost.equals(ghost.BLINKY))
				{
					myMoves.put(ghost, g.getNextMoveTowardsTarget(g.getGhostCurrentNodeIndex(ghost), 50, DM.PATH));
				}
				gv.addPoints(g, Color.WHITE, 5);
				*/
				
				//scatter mode 
				if (chaseOrScatterTeller(g) == 1 || chaseOrScatterTeller(g) == 2) 
				{
					System.out.println("scatter mode activated");
					if (ghost.equals(ghost.PINKY))
					{
						myMoves.put(ghost, g.getNextMoveTowardsTarget(g.getGhostCurrentNodeIndex(ghost), pinkyScatterNode, DM.EUCLID));
						gv.addPoints(g, Color.PINK, pinkyScatterNode);
					}
					
					if (ghost.equals(ghost.BLINKY))
					{
						//cruise elroy mode
						if (g.getNumberOfActivePills() == 10)
						{
							//add going to normal if pacman is eaten during elroy mode until all ghosts are out 
							if (hasPacmanDied(g, hasPacmanDiedVar)) 
							{
								//normal scatter behavior 
								myMoves.put(ghost, g.getNextMoveTowardsTarget(g.getGhostCurrentNodeIndex(ghost), blinkyScatterNode, DM.EUCLID));
								gv.addPoints(g, Color.RED, blinkyScatterNode);
								//speed decrease here
							}
							
							int pacManCurrentPos = g.getPacmanCurrentNodeIndex();
							gv.addPoints(g, Color.RED, pacManCurrentPos);
							myMoves.put(ghost, g.getNextMoveTowardsTarget(g.getGhostCurrentNodeIndex(ghost), pacManCurrentPos, DM.EUCLID));
							//speed increase goes here
							
						} else  
						{
							//normal scatter mode
							myMoves.put(ghost, g.getNextMoveTowardsTarget(g.getGhostCurrentNodeIndex(ghost), blinkyScatterNode, DM.EUCLID));
							gv.addPoints(g, Color.RED, blinkyScatterNode);
						}
					}
					
					if (ghost.equals(ghost.INKY))
					{
						myMoves.put(ghost, g.getNextMoveTowardsTarget(g.getGhostCurrentNodeIndex(ghost), inkyScatterNode, DM.EUCLID));
						gv.addPoints(g, Color.CYAN, inkyScatterNode);
					}
					
					if (ghost.equals(ghost.SUE))
					{
						myMoves.put(ghost, g.getNextMoveTowardsTarget(g.getGhostCurrentNodeIndex(ghost), sueScatterNode, DM.EUCLID));
						gv.addPoints(g, Color.ORANGE, sueScatterNode);
					}
				}
				//chase mode 
				if (chaseOrScatterTeller(g) == 3 || chaseOrScatterTeller(g) == 4) 
				{
					/*
					//default chase mode for all ghosts to go to top right corner
					System.out.println("Chase mode activated");
					myMoves.put(ghost, g.getNextMoveTowardsTarget(g.getGhostCurrentNodeIndex(ghost), 5, DM.PATH));
					gv.addPoints(g, Color.GRAY, 5);
					*/
					
					System.out.println("Chase mode activated");
					//BLINKY CHASE 
					if (ghost.equals(ghost.BLINKY)) 
					{
						if(g.getNumberOfActivePills() == 20)
						{
							//speed increase 
						}
						
						int pacManCurrentPos = g.getPacmanCurrentNodeIndex();
						myMoves.put(ghost, g.getNextMoveTowardsTarget(g.getGhostCurrentNodeIndex(ghost), pacManCurrentPos, DM.EUCLID));
						gv.addPoints(g, Color.RED, pacManCurrentPos);
						
					}
					//PINKY CHASE
					if (ghost.equals(ghost.PINKY))
					{
						//System.out.println("pinky is chasing");
						myMoves.put(ghost, g.getApproximateNextMoveTowardsTarget(g.getGhostCurrentNodeIndex(ghost), pinkyTargetNode(g), g.getGhostLastMoveMade(ghost), DM.EUCLID));
						gv.addPoints(g, Color.PINK, pinkyTargetNode(g));
					}
					//INKY CHASE
					if (ghost.equals(ghost.INKY))
					{
						myMoves.put(ghost, g.getNextMoveTowardsTarget(g.getGhostCurrentNodeIndex(ghost), 5, DM.EUCLID));
						gv.addPoints(g, Color.GRAY, 5);
					}
					//SUE CHASE
					if (ghost.equals(ghost.SUE))
					{
						System.out.println("sue is chasing");
						//checking the proximity of sue and adjusting targetNode accordingly
						double proximity = g.getEuclideanDistance(g.getGhostCurrentNodeIndex(ghost), g.getPacmanCurrentNodeIndex());
						int sueTarget = -1;
						
						if (proximity < 40) 
						{
							sueTarget = inkyScatterNode;
						} 
						else
						{
							sueTarget = g.getPacmanCurrentNodeIndex();
						}
						myMoves.put(ghost, g.getNextMoveTowardsTarget(g.getGhostCurrentNodeIndex(ghost), sueTarget, DM.EUCLID));
						gv.addPoints(g, Color.ORANGE, sueTarget);
					}
					
				}
			}
		}
		
		return myMoves;
	}
	
	
	//HELPER FUNCTIONS
	
	//sue helper function to check the proximity of her
	public int sueProxmityCheck(Game g, int scatterNode)
	{
		int proximity = g.getEuclideanDistance(g.getGhostCurrentNodeIndex(ghost), scatterNode)
		
		return 1;
	}
	
	
	
	//getting the maze, making a list of 4 nodes, checking nodes for validity, then returning a node index
	public int pinkyTargetNode(Game g) 
	{
		Maze maze = g.getCurrentMaze();
		Node [] nodeLst = maze.graph;
		
		
		int pacManCurrentNode = g.getPacmanCurrentNodeIndex();
		int pmCurrPosX = g.getNodeXCood(pacManCurrentNode);
		int pmCurrPosY = g.getNodeYCood(pacManCurrentNode);
		MOVE pmLastMove = g.getPacmanLastMoveMade();
		
		int distanceFromPM = 4;
		int xShift = 0;
		int yShift = 0;
		boolean foundMove = false;
		Node targetNode = null;
		int targetInt = 0;
		
		if (g.getPacmanLastMoveMade() == MOVE.UP)
		{
			xShift = 0;
			yShift = -1;
		}
		if (g.getPacmanLastMoveMade() == MOVE.DOWN)
		{
			xShift = 0;
			yShift = 1;
		}
		if (g.getPacmanLastMoveMade() == MOVE.RIGHT)
		{
			xShift = -1;
			yShift = 0;
		}
		if (g.getPacmanLastMoveMade() == MOVE.LEFT)
		{
			xShift = -1;
			yShift = 0;
		}
		
		while(!foundMove)
		{
			for (int i = 0; i < nodeLst.length; i++)
			{
				if (nodeLst[i].x == (pmCurrPosX + (distanceFromPM * xShift)) && 
					nodeLst[i].y == (pmCurrPosY + (distanceFromPM * yShift)))
				{
					targetInt = nodeLst[i].nodeIndex;
					foundMove = true;
				}
			}
			distanceFromPM = distanceFromPM - 1;
		}
		return targetInt;
	}
	
	
	//has pacman died during the current level
	public boolean hasPacmanDied(Game g, boolean hasPacmanDiedFinal)
		{
			boolean wasPacmanEverEatenDuringLevel = false;
			int LvlTime = g.getCurrentLevelTime();
			boolean levelReset = false;
			
			if (LvlTime == 0)
			{
				levelReset = true;
			}
			
			if (g.wasPacManEaten() && LvlTime > 0)
			{
				wasPacmanEverEatenDuringLevel = true;
			}
			
			if(levelReset)
			{
				hasPacmanDiedFinal = false;
			}
			//if pacman has died during the level and the ghosts are still inside the lair then return true and do normal scatter behavior
			else if (wasPacmanEverEatenDuringLevel && !areAllGhostsOutOfLair(g))
				hasPacmanDiedFinal = true;
			
			return hasPacmanDiedFinal;
		}
	
	
	//returns true if all the ghosts are outside of the lair 
	public boolean areAllGhostsOutOfLair(Game g) 
	{
		int global = 0;
		for(GHOST ghost : GHOST.values()) 
		{
			if (g.getGhostLairTime(ghost) == 0)
			{
				global ++;
			}
		}
		if (global == 4) 
		{
			return true;
		}
		else return false;
	}
	
	
	//returns an int to tell if ghosts should be in scatter or chase mode and for how long
	//based on first level waves in "game internals"
	public int chaseOrScatterTeller (Game g)
	{
		//1: 7 second scatter
		//2: 5 second scatter
		//3: 20 second chase
		//4: permanent chase
		
		//temporarily in seconds 
		//use in getMove*
		int mult = 25;
		int ongoingTime = g.getCurrentLevelTime();
		int temp = 0;
		
		if (g.wasPacManEaten()) 
		{
			temp = g.getCurrentLevelTime();
		}
		
		//scatter if's
		if (ongoingTime <= 7 * mult)
		{
			return 1; 
		}
		else if (27 * mult <= ongoingTime - temp && ongoingTime - temp <= 34 * mult)
		{
			return 1;
		}
		else if (ongoingTime - temp >= 54 * mult && ongoingTime - temp <= 59 * mult) 
		{
			return 2;
		}
		else if (ongoingTime - temp >= 79 * mult && ongoingTime - temp <= 84 * mult)
		{
			return 2;
		}
		//chase if's
		else if (ongoingTime - temp >= 7 * mult && 27 * mult >= ongoingTime - temp) 
		{
			return 3;
		}
		else if (ongoingTime - temp >= 34 * mult && ongoingTime - temp <= 54 * mult)
		{
			return 3;
		}
		else if (ongoingTime - temp >= 59 * mult && ongoingTime - temp <= 79 * mult)
		{
			return 3;
		}
		else return 4;
	}
	
	//RED
	
	
	//PINK
	
	//BLUE
	
	//ORANGE
}